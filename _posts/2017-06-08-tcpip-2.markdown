---
layout:     post
title:      "TCP/IP详解学习笔记（2）"
subtitle:   "用户数据包协议与IP分组"
date:       2017-06-08
author:     "SmartYi"
header-img: "img/in-post/tcp-ip-2/head.jpg"
tags:
    - TCP/IP
    - 计算机网络
---


## TCP/IP详解学习笔记（2）—— 用户数据报协议和IP分组

> 2017-06-08 By Mingkuan Li

#### 1. 引言

用户数据报协议（User Datagram Protocol）是一种保留消息边界的面向数据报的传输协议。
- 它不提供 **差错纠正**，**队列管理**，**重复消除**，**流量控制** 和 **拥塞控制**。
- 它提供 **差错检测**，包含我们在传输层中碰到的第一个真实的端到端校验和。
- 它把应用程序传给IP层的数据发送出去，但是并不能保证他们能够到达目的地，要想保证数据被可靠投递或正确排序，应用程序必须自己实现这些保护功能。
- 由于它具有 **无连接** 的特性，它比其他的传输协议使用更少的开销。

如下图所示为一个UDP数据报的IPv4封装，IPv4协议字段使用17来表示UDP，IPv6在下一个头部字段也使用相同的值。
![UDP数据报格式](/img/in-post/tcp-ip-2/1.png)

#### 2. UDP头部

UDP头部与负载的结构如下图所示：
-  **端口号** 帮助协议辨认发送和接收的进程，它们是抽象的并且不与主机上的任何物理实体相关。特别注意端口号在不同协议之间是互相独立的，也就是说TCP端口号只能被TCP使用，UDP同理，因此两个完全不同的服务器可以使用相同的端口号和IP地址，只要他们使用不同的传输协议。
-  **UDP长度**表示UDP头部和UDP数据的总长度，特别注意的是这个字段是冗余的因为IPv4头部包含了数据报的总长度，同时IPv6头部包含了负载长度。

![UDP头部与负载](/img/in-post/tcp-ip-2/2.png)

#### 3. UDP校验和

UDP校验和具有下边几个特性：
- UDP校验和覆盖了UDP头部、UDP数据和一个 *伪头部*。
- 它由初始的发送方计算得到，由最终的目的方校验。
- 它在传输过程不会被修改，除非经过了一个NAT。

计算UDP校验和的基本方法为16位字的反码和的反码，计算方法如下图所示：
![UDP校验和的计算方法](/img/in-post/tcp-ip-2/3.png)

其中需要注意两个细节：
- UDP数据报长度可以是奇数个字节，而校验和算法只相加16位字，因此UDP在处理过程中是在奇数长度的数据报的尾部添加一个0作为填充，而这个0只适用于校验和的计算与验证并不会实际传输出去
- UDP（也包括TCP）在计算校验和的时候包含了一个衍生自IPv4头部字段的12字节的伪头部或者衍生自IPv6头部的40个字节的伪头部。这个伪头部包含了来自IP头部的源和目的地址以及协议或下一个头部字段。它的目的是让UDP层验证数据是否已经到达正确的目的地。
计算的时候覆盖的字段如下图所示：
![UDP校验和的覆盖字段](/img/in-post/tcp-ip-2/4.png)

如果接收方发现校验和的字段为0x0000表示发送方没有计算校验和，如果发送方计算了校验和，而接收方检测到了校验差错，那么UDP数据报就会被丢弃，除了会有一些统计数据被更新，其他没有产生差错消息。

考虑到伪头部的情况，可以发现当一个UDP/IPv4数据报穿过NAT的时候，需要修改IP层头部的校验和，UDP伪头部的校验和，因为IP层的地址或UDP层的端口号都有可能改变。因此 **NAT通常因同时修改多层而违反了分层规则** 。

> UDP底层实现在不可达的时候会产生一个ICMPv4目标不可达（端口不可达）的消息返回给发送方 

#### 4. UDP-Lite

有些程序容忍在发送和接收的数据里引入的比特差错，因此一个称为UDP-Lite的协议通过修改传统UDP协议提供了部分校验和来解决这个问题。UDP-Lite头部结构如下图所示：
![UDP-Lite头部结构](/img/in-post/tcp-ip-2/5.png)

- UDP-Lite通过一个 **校验和覆盖范围** 字段取代了长度字段来修改UDP头部
- **校验和覆盖范围** 字段中0表示整个负载都被校验和覆盖，其余的最小值是8，因为UDP头部自身总是要求被校验和覆盖的。

#### 5. IP分片

链路层通常对可传输的每个帧的最大长度有一个上限。为了保持IP数据报抽象与链路层细节的一致和分离，IP引人了分片和重组。

##### 5.1 分片

当IP接收到一个要发送的IP数据报是，会判断改数据报应该从哪个本地端口转发以及对应的MTU是多少。如果数据报太大那么进行分片。其中IPv4分片可以在端到端路径上的任何中间路由器上进行，而IPv6只允许源主机进行分片。

IP数据报分片了直到最终目的地才会被重组，原因如下：
- 网络中不进行重组能够减轻路由器等转发设备的负担
- 同一数据报的不同分片可能由不同的路径到达相同的目的地，这种情况下路径上的路由器没有能力来重组原始的数据报。

如果数据报大小超过链路的MTU，那么IP数据报就会被分割成多个分组，这有可能导致性能问题因为 **任何一个分片丢失都导致整个数据报丢失**，而且如果对于TCP而言如果一个分片丢失了需要重传整个报文段，因为如果分片是在路径上路由器进行的，源主机不知道那个分片丢失了。通常是要减小每个包的大小避免分片的。

下图所示为一个3023字节的UDP数据报被分割成多个IPv4分组的情况：
![IPv4分片例子](/img/in-post/tcp-ip-2/6.png)

特别的，**有更大偏移量的分片要比第一个分片优先投递**，因为：
1. 最后一个分片被优先投递，接受主机就可以确定所需的缓存空间最导致，以重组整个数据报
2. 有些技术需要利用更高层的信息，这些信息从第一个分片中可以得到而后面的分片都没有了

##### 5.2 重组

（TO be continue…）

