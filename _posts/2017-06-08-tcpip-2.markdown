---
layout:     post
title:      "TCP/IP详解学习笔记（2）"
subtitle:   "用户数据包协议与IP分组"
date:       2017-06-08
author:     "SmartYi"
header-img: "img/in-post/tcp-ip-2/head.jpg"
tags:
    - TCP/IP
    - 计算机网络
---


## TCP/IP详解学习笔记（2）—— 用户数据报协议和IP分组

> 2017-06-08 By Mingkuan Li

#### 1. 引言

用户数据报协议（User Datagram Protocol）是一种保留消息边界的面向数据报的传输协议。
- 它不提供 **差错纠正**，**队列管理**，**重复消除**，**流量控制** 和 **拥塞控制**。
- 它提供 **差错检测**，包含我们在传输层中碰到的第一个真实的端到端校验和。
- 它把应用程序传给IP层的数据发送出去，但是并不能保证他们能够到达目的地，要想保证数据被可靠投递或正确排序，应用程序必须自己实现这些保护功能。
- 由于它具有 **无连接** 的特性，它比其他的传输协议使用更少的开销。

如下图所示为一个UDP数据报的IPv4封装，IPv4协议字段使用17来表示UDP，IPv6在下一个头部字段也使用相同的值。
![UDP数据报格式](/img/in-post/tcp-ip-2/1.png)

#### 2. UDP头部

UDP头部与负载的结构如下图所示：
-  **端口号** 帮助协议辨认发送和接收的进程，它们是抽象的并且不与主机上的任何物理实体相关。特别注意端口号在不同协议之间是互相独立的，也就是说TCP端口号只能被TCP使用，UDP同理，因此两个完全不同的服务器可以使用相同的端口号和IP地址，只要他们使用不同的传输协议。
-  **UDP长度**表示UDP头部和UDP数据的总长度，特别注意的是这个字段是冗余的因为IPv4头部包含了数据报的总长度，同时IPv6头部包含了负载长度。

![UDP头部与负载](/img/in-post/tcp-ip-2/2.png)

#### 3. UDP校验和

UDP校验和具有下边几个特性：
- UDP校验和覆盖了UDP头部、UDP数据和一个 *伪头部*。
- 它由初始的发送方计算得到，由最终的目的方校验。
- 它在传输过程不会被修改，除非经过了一个NAT。

计算UDP校验和的基本方法为16位字的反码和的反码，计算方法如下图所示：
![UDP校验和的计算方法](/img/in-post/tcp-ip-2/3.png)

其中需要注意两个细节：
- UDP数据报长度可以是奇数个字节，而校验和算法只相加16位字，因此UDP在处理过程中是在奇数长度的数据报的尾部添加一个0作为填充，而这个0只适用于校验和的计算与验证并不会实际传输出去
- UDP（也包括TCP）在计算校验和的时候包含了一个衍生自IPv4头部字段的12字节的伪头部或者衍生自IPv6头部的40个字节的伪头部。这个伪头部包含了来自IP头部的源和目的地址以及协议或下一个头部字段。它的目的是让UDP层验证数据是否已经到达正确的目的地。
计算的时候覆盖的字段如下图所示：
![UDP校验和的覆盖字段](/img/in-post/tcp-ip-2/4.png)

如果接收方发现校验和的字段为0x0000表示发送方没有计算校验和，如果发送方计算了校验和，而接收方检测到了校验差错，那么UDP数据报就会被丢弃，除了会有一些统计数据被更新，其他没有产生差错消息。

考虑到伪头部的情况，可以发现当一个UDP/IPv4数据报穿过NAT的时候，需要修改IP层头部的校验和，UDP伪头部的校验和，因为IP层的地址或UDP层的端口号都有可能改变。因此 **NAT通常因同时修改多层而违反了分层规则** 。

> UDP底层实现在不可达的时候会产生一个ICMPv4目标不可达（端口不可达）的消息返回给发送方 

#### 4. UDP-Lite

有些程序容忍在发送和接收的数据里引入的比特差错，因此一个称为UDP-Lite的协议通过修改传统UDP协议提供了部分校验和来解决这个问题。UDP-Lite头部结构如下图所示：
![UDP-Lite头部结构](/img/in-post/tcp-ip-2/5.png)

- UDP-Lite通过一个 **校验和覆盖范围** 字段取代了长度字段来修改UDP头部
- **校验和覆盖范围** 字段中0表示整个负载都被校验和覆盖，其余的最小值是8，因为UDP头部自身总是要求被校验和覆盖的。

#### 5. IP分片

链路层通常对可传输的每个帧的最大长度有一个上限。为了保持IP数据报抽象与链路层细节的一致和分离，IP引人了分片和重组。

##### 5.1 分片

当IP接收到一个要发送的IP数据报是，会判断改数据报应该从哪个本地端口转发以及对应的MTU是多少。如果数据报太大那么进行分片。其中IPv4分片可以在端到端路径上的任何中间路由器上进行，而IPv6只允许源主机进行分片。

IP数据报分片了直到最终目的地才会被重组，原因如下：
- 网络中不进行重组能够减轻路由器等转发设备的负担
- 同一数据报的不同分片可能由不同的路径到达相同的目的地，这种情况下路径上的路由器没有能力来重组原始的数据报。

如果数据报大小超过链路的MTU，那么IP数据报就会被分割成多个分组，这有可能导致性能问题因为 **任何一个分片丢失都导致整个数据报丢失**，而且如果对于TCP而言如果一个分片丢失了需要重传整个报文段，因为如果分片是在路径上路由器进行的，源主机不知道那个分片丢失了。通常是要减小每个包的大小避免分片的。

下图所示为一个3023字节的UDP数据报被分割成多个IPv4分组的情况：
![IPv4分片例子](/img/in-post/tcp-ip-2/6.png)

特别的，**有更大偏移量的分片要比第一个分片优先投递**，因为：
1. 最后一个分片被优先投递，接受主机就可以确定所需的缓存空间最导致，以重组整个数据报
2. 有些技术需要利用更高层的信息，这些信息从第一个分片中可以得到而后面的分片都没有了

##### 5.2 重组

一个数据报的任何一个分片首先到达时，IP层就启动一个计时器，如果不这样做的话，不能到达的分片可能导致接收方用尽缓存从而留下一种攻击的手段。一般超时时间是30s或60s，当收到任何一个分片时计时器就会开始及时，并且收到新的分片也不会被重置，因此计时器给出了同一个数据报分片之间可被分隔的最大时间的限度。

#### 6 采用UDP的路径MTU发现

对于UDP这样的协议来说，调用协议的应用程序一般只控制输出数据报的大小，如果有方法确定一个可以避免分片的合适的数据报大小，那么会是很有用的。

传统的PMTUD使用ICMPPTB消息(见第8章)来获得一个最大分组大小，其沿着一条路由路径传输不会引人分片。典型地，这些消息在UDP层之下被处理，对应用程序不可见，因此，它们要么是一个API调用，被应用程序用于获取对路径（与每个路径的目的地都已通信过的）MTU大小的当前最好的估计，要么是不被应用程序所知的、能独立地进行PMTUD的IP层。IP层经常基于每个目的地址缓存一个PTMUD信息，当没有更新就让它超时。

#### 8 最大UDP数据报长度

理论上一个IPv4数据报的最大长度是65535字节，因为IPv4头部的16位总长度字段决定。除去20字节不带选项的IPv4头部和一个8字节的UDP头部，剩下最大65507字节为UDP数据报的用户数据的最大长度。然而，这个大小往往不能被满额进行端到端投递，因为：
- 系统的本地协议可能有一些限制
- 接收应用程序可能没准备好去处理这么大的数据报

API套接字提供一组函数让应用程序能够调用以设置或查询接收和发送缓存的大小。对于一个UDP套接字,这个大小与应用程序可读或可写的最大UDP数据报大小直接关联。典型的默认值是8192字节或65535字节，但一般可以调用`setsocketopt()`API来设置更大的值。

UDP/IP能发送和接收一个给定大小的数据报并不意味着接收应用程序就能够读取这种大小的数据报。UDP编程接口允许应用程序指定每次一个网络的读操作完成时返回的最大字节数。如果接收的数据报超过这个指定大小，大多情况下API会阶段数据报，丢弃这个数据报里超过接收应用程序指定字节数的任何超额数据。

#### 9 UDP服务器设计

典型的客户机/服务器场景中，一个客户机启动，立即与一台服务器通信，然后就完成了，另一方面服务器启动然后进入睡眠，等待一个客户机请求的到来。它们在客户机数据报到达时被唤醒，这经常需要服务器来评估这个请求以及可能要进行更进一步的处理。

- **IP地址与UDP端口号**：服务器接收到的UDP数据报中，IP头部包含了源和目的地IP地址，UDP头部包含了源和目的地的UDP端口号。当一个应用程序接收到一个UDP消息时，**它的IP和UDP头部已经被剥掉**，如果想要给予回复，应用程序必须 **由操作系统以其他方式告知是谁**（源IP地址和端口号）发送的消息。这个特点允许UDP服务器去处理多个客户机。有些服务器需要知道数据报的目的IP地址，例如一台主机可能有多个地址，单个服务器使用它们中任意一个接受进入的数据报，它们可能需要对请求不同IP地址的数据报提供不同的服务。
- **限制本地IP地址**：大多数UDP服务器在创建UDP端点时都使其本地IP地址具有通配符的特点，也就是说如果进人的UDP数据报的目的地是一个服务器的端口，那么在该服务器上的任何本地接口均可接收到它。
- **使用多地址**：在同一个端口号开启几个不同的服务器，每个服务器使用一个不同的本地IP地址，这 是可能的。然而，通常应用程序应该告诉系统允许这样重用相同的端口。
- **限制远端IP**：UDP服务器的三种地址绑定方式如下所示：
![UDP服务器地址绑定方式](/img/in-post/tcp-ip-2/7.png)
- **流量和拥塞控制的缺失**：大多数UDP服务器是迭代服务器，也就是说单个服务器现成在单个UDP端口处理所有的用户请求。通常一个应用程序使用的每个UDP端口都有一个大小有限的队列与之对应，来自不同客户机，几乎同时到达的请求会被UDP自动排入队列中，并根据FCFS(先到先服务)的策略传送给应用程序。然而这个队列可能会溢出，使得UDP实现丢弃进入的数据报。因为UDP **不提供流量控制**，而且也是一个 **无连接协议**，自身没有可靠机制，应用程序无法得知什么时候UDP队列产生了溢出。

#### 10 互联网中的UDP

研究发现，UDP占据了观察到的互联网流量的10%~40%，同时随着点对点应用数量的增加，UDP的使用也在上升，尽管 **TCP流量仍在分组和字节量方面占据了统治地位**。

同时，互联网分片流量大多是UDP的，最常见的被分片流量类型是基于UDP的多媒体流量以及出现在VPN隧道里的封装隧道流量。分片出现的原因主要来自两个因素：
- **粗糙封装和路径MTU发现的缺失**：与多个协议层的多层封装有关，增加了额外的头部使得原来适合1500字节MTU的IP分组不在装得下，例如要经过VPN隧道的流量。
- **采用可能使用大消息的应用程序**： 使用大分组的应用程序例如视频应用程序最终要分片。

#### 11 与UDP和IP分片相关的攻击

大多数关于UDP的攻击与 **耗尽某些共享资源（如缓存、链路容量等）**或者 **利用协议实现中的漏洞**以致系统崩溃有关，这两者都属于DoS攻击的大分类：*成功的攻击者可是服务队合法用户不可用*。最直接的使用UDP的DoS攻击是尽可能快地直接产生大量的流量，因为UDP不能管理它的流量发送率。

经常与UDP相关的另一种更复杂的Dos攻击类型是 **放大(magnification)**攻击。这种攻击类型通常涉及一个攻击者发送小部分流量，而致使其他系统产生更多的流量的情况，一个恶意的UDP发送方伪造IP源地址成一个受害者的地址，并且设置目的地址为广播类型的一种（如直接广播地址），UDP分组被发送到一个能对进入数据报做回应的服务。实现了这些服务的服务器在回应时，它们把消息导向到包含在到达的UDP分组的源IP地址字段里的IP地址。这样，源地址就是那个受害者，所以受害者主机就 会因有多个UDP流量对其回应而处于超负载中。

针对IP分片的其中一种攻击方式为发送不带任何数据的分片，这种攻击利用IPv4重组程序代码中的一个漏洞从而导致系统崩溃。

另一种在IPv4重组层的攻击是 **泪滴(teardrop)**攻击，涉及使用可使某些系统崩溃或严重受影响的重叠分片偏移(Fragment offset)字段来精心构造一系列分片。这种攻击的一个变种涉及可覆盖前一分片UDP头部的重叠分片偏移。

还有与之相关的Ping to Death攻击。该攻击一般由ICMPv4回显请求构建，也适合UDP。它通过产生一个在重组时会超过最大限制的IPv4数据报来进行。这是相当直接的，因为分片偏移字段可设置的最大值只能到8192，代表了65528字节的偏移，任何长度超过7字节的这样的分片都会导致产生一个超过最大值65535字节的重组数据报。

#### 12 总结

它给用户进程(在IP层之上)提供的服务是端日号和校验和。它没有流量控制，没有拥塞控制和差错纠正。它有差错检测(对UDP/IPv4可选，但对UDP/IPv6强制使用)和消息边界保留。我们使用了UDP来检查互联网校验和以及观察IP分片如何进行。我们也见到了UDP的其 他方面：如何与路径MTU发现一起使用，如何影响服务器设计，以及它在互联网的出现。

当要避免建立连接的开销时，当要使用多端点传送时(组播/广播)，或者当不需要TCP 的相对“笨重”的可靠语义(例如排序、流量控制以及重传)时，最常用的就是UDP了。多媒体和点对点应用程序的发展促进了UDP协议的发展，同时UDP协议也是支持VoIP的主要协议。UDP的其他主要用途之一是支持DNS。

